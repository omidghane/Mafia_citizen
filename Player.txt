import java.util.ArrayList;
import java.util.HashMap;
import java.io.IOException;


/**
 * in this class we save our players information
 * to use them somewhere else
 */

public class Player {

    // roles of All players storaged to player class
    private HashMap<String,Player> roles;

    // storage the roles of players that is related to determining_roles function not to have duplicate role
    private ArrayList<Integer> storage_roles;

    //saving votes given
    private HashMap<String, Integer> votes;

    // dead players listed
    private ArrayList<String> dead_player;

    // number of player run this function
    private int run_function = 0;

    public Player(){
        roles = new HashMap<>();
        storage_roles = new ArrayList<>();
        votes = new HashMap<>();
        dead_player = new ArrayList<>();
    }

    /**
     *
     * @return
     * @throws IOException
     */
    public synchronized String most_vote() throws IOException {
        if(run_function == 0) {
            int equality = 0;
            int most_vote = 0;
            String most_name = null;
            for (String player : votes.keySet()) {
                if (votes.get(player) > most_vote) {
                    most_vote = votes.get(player);
                    most_name = player;
                    equality = 0;
                } else if (votes.get(player) == most_vote) {
                    equality = 1;
                }
            }
            if (equality == 1 || most_name == null) {
                run_function++;
                return "no one was deleted";
            } else {
                removing_player(most_name);
                System.out.println(most_name + " : " + most_vote);
                run_function++;
                return most_name + " was removed";
            }
        }else{
            return null;
        }
    }

    public void removing_player(String name_removed){
        dead_player.add(name_removed);
        roles.remove(name_removed);
        votes.remove(name_removed);
        for(Server_clients client : Server.users){
            if(client.getName_client().equals(name_removed)){
                Server.users.remove(client);
                break;
            }
        }
    }

    public boolean getting_vote(String name_vote){
        try {
            int help = 0;
            for (String name : roles.keySet()) {
                if (name.equals(name_vote)) {
                    help = 1;
                    break;
                }
            }
            if (help == 0) {
                return false;
            }
            int num_votes = votes.get(name_vote);
            votes.replace(name_vote, ++num_votes);
            return true;
        }catch (NullPointerException e){
            e.printStackTrace();
            return false;
        }
    }

    /**
     * setting roles in server night class
     * @param name
     * @param player
     */
    public void setRoles(String name,Player player) {
        roles.put(name,player);
        setting_votes(name);
    }

    // setting names in votes variable
    private void setting_votes(String player_name){
        votes.put(player_name,0);
    }

    // setting the storage_roles
    public void setStorage_roles(int num_role) {
        storage_roles.add(num_role);
    }

    // getting the roles of players
    public HashMap<String, Player> getRoles() {
        return roles;
    }

    // get the storage_roles
    public ArrayList<Integer> getStorage_roles() {
        return storage_roles;
    }

    public HashMap<String, Integer> getVotes() {
        return votes;
    }

    public ArrayList<String> getDead_player() {
        return dead_player;
    }
}

public class Citizen extends Player {
}

public class Mafia extends Player {
}

public class Detector extends Citizen{
}

public class Doctor extends Citizen{
}

public class Doctor_lector extends Mafia{
}

public class God_father extends Mafia{
}

public class Killer extends Citizen{
}

public class Mayor extends  Citizen{
}

public class Psychologist extends Citizen{
}

public class Strong_health extends Citizen{
}

