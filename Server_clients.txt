import java.io.*;
import java.net.Socket;
import java.util.*;

public class Server_clients implements Runnable{
   // BufferedReader in;
  //  PrintWriter out;

    // showing
    private boolean alive;

    private Play_Round play_round;

    DataInputStream in;
    DataOutputStream out;

    // object of introduce_night for accessing to this class
    private Server_introduce_night server_introduce_night;

    // object of day for accessing to this class
    private Server_Day server_day;

    private Server_Night server_night;

    // name of client connected to this server
     private String name_client;

     // role of client connected to this server
     private Player role;

    // the socket
    private Socket socket;

    // show the player connect that is first or second or ...
    private int player_index;

    /**
     * constructor for saving socket and newing objects
     * @param socket
     * @param player_index
     * @throws IOException
     */
    public Server_clients(Socket socket, int player_index) throws IOException {
        this.socket = socket;
        in = new DataInputStream(socket.getInputStream());
        out = new DataOutputStream(socket.getOutputStream());
        server_introduce_night = new Server_introduce_night(socket,player_index);
        server_day = new Server_Day(socket);
        server_night = new Server_Night(socket);
        play_round = new Play_Round();
    //    in = new BufferedReader(new InputStreamReader(socket_night.getInputStream()));
    //    out = new PrintWriter(new OutputStreamWriter(socket_night.getOutputStream()))
        this.player_index = player_index;
        alive = true;
    }

    /**
     * the client_Handler for doing things server do for each player
     * during introducing_night , day , night
     */
    @Override
    public void run() {
        Scanner input = new Scanner(System.in);
     //   Thread t_h = new Thread(new Helping_thread(),"t2");
        try {
        //   while(true) {
            if ("introduce_night".equals(play_round.getState())) {
            //    server_introduce_night.connect();
            //    name_client = server_introduce_night.getName_client();
             //   System.out.println(name_client);

             //   Thread.sleep(5000);
                name_client = in.readUTF();
                if(player_index == 1) {
                    Server.player.setRoles(name_client, new God_father());
                }else if(player_index == 2){
                    Server.player.setRoles(name_client, new Mafia());
                }else if(player_index == 3){
                    Server.player.setRoles(name_client, new Doctor_lector());
                }
                for(Server_clients client : Server.users){
                    Server.ready_continue.put(client.getName_client(),false);
                }

                play_round.state_changing();

            }  if ("day".equals(play_round.getState())) {
                server_day.setName_client(name_client);
                server_day.connect();

                check_alive();
                Thread.sleep(4000);
                if(!alive){
                    System.out.println(name_client + " dead");
                    out.writeUTF("you are removed");
                    out.writeUTF("DEAD");
                    Thread.sleep(3000);
                    return;
                }else{
                    out.writeUTF("ALIVE");
                }

                play_round.state_changing();
                Thread.sleep(5000);
            }  if ("night".equals(play_round.getState())) {
                System.out.println("its night");

                play_round.state_changing();
            }
        //    }
        }catch (InterruptedException | IOException e){
            e.printStackTrace();
        }

    }

    /**
     * check if the player is still alive
     */
    public void check_alive(){
        try {
            for (String player : Server.player.getDead_player()) {
                if (player.equals(name_client)) {
                    alive = false;
                    return;
                }
            }
        }catch (NullPointerException e){

        }
    }

    // getting role of the client
    public Player getRole() {
        return role;
    }

    // getting name of the client
    public String getName_client() {
        return name_client;
    }

    // getting the object of server_introduce_night
    public Server_introduce_night getServer_introduce_night() {
        return server_introduce_night;
    }

    //setting name of the client
    public void setName_client(String name_client) {
        this.name_client = name_client;
    }

    // setting role of the client
    public void setRole(Player role) {
        this.role = role;
    }

    // getting the player index
    public int getPlayer_index() {
        return player_index;
    }

    public Server_Day getServer_day() {
        return server_day;
    }
}
